// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_INCLUDED_chat_2eproto
#define PROTOBUF_INCLUDED_chat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto 

namespace protobuf_chat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2eproto
class AuthenticateWeb;
class AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
class AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
class AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class ClientMessageWrapper;
class ClientMessageWrapperDefaultTypeInternal;
extern ClientMessageWrapperDefaultTypeInternal _ClientMessageWrapper_default_instance_;
class CreateAccountWeb;
class CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFailure;
class CreateAccountWebFailureDefaultTypeInternal;
extern CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
class CreateAccountWebSuccess;
class CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
class ServerMessageWrapper;
class ServerMessageWrapperDefaultTypeInternal;
extern ServerMessageWrapperDefaultTypeInternal _ServerMessageWrapper_default_instance_;
namespace google {
namespace protobuf {
template<> ::AuthenticateWeb* Arena::CreateMaybeMessage<::AuthenticateWeb>(Arena*);
template<> ::AuthenticateWebFailure* Arena::CreateMaybeMessage<::AuthenticateWebFailure>(Arena*);
template<> ::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::AuthenticateWebSuccess>(Arena*);
template<> ::ClientMessageWrapper* Arena::CreateMaybeMessage<::ClientMessageWrapper>(Arena*);
template<> ::CreateAccountWeb* Arena::CreateMaybeMessage<::CreateAccountWeb>(Arena*);
template<> ::CreateAccountWebFailure* Arena::CreateMaybeMessage<::CreateAccountWebFailure>(Arena*);
template<> ::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::CreateAccountWebSuccess>(Arena*);
template<> ::ServerMessageWrapper* Arena::CreateMaybeMessage<::ServerMessageWrapper>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CreateAccountWeb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateAccountWeb) */ {
 public:
  CreateAccountWeb();
  virtual ~CreateAccountWeb();

  CreateAccountWeb(const CreateAccountWeb& from);

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateAccountWeb* other);
  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return CreateMaybeMessage<CreateAccountWeb>(NULL);
  }

  CreateAccountWeb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAccountWeb& from);
  void MergeFrom(const CreateAccountWeb& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required string plaintextPassword = 2;
  bool has_plaintextpassword() const;
  void clear_plaintextpassword();
  static const int kPlaintextPasswordFieldNumber = 2;
  const ::std::string& plaintextpassword() const;
  void set_plaintextpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_plaintextpassword(::std::string&& value);
  #endif
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  ::std::string* mutable_plaintextpassword();
  ::std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(::std::string* plaintextpassword);

  // @@protoc_insertion_point(class_scope:CreateAccountWeb)
 private:
  void set_has_email();
  void clear_has_email();
  void set_has_plaintextpassword();
  void clear_has_plaintextpassword();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plaintextpassword_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthenticateWeb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AuthenticateWeb) */ {
 public:
  AuthenticateWeb();
  virtual ~AuthenticateWeb();

  AuthenticateWeb(const AuthenticateWeb& from);

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthenticateWeb* other);
  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return CreateMaybeMessage<AuthenticateWeb>(NULL);
  }

  AuthenticateWeb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateWeb& from);
  void MergeFrom(const AuthenticateWeb& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required string plaintextPassword = 2;
  bool has_plaintextpassword() const;
  void clear_plaintextpassword();
  static const int kPlaintextPasswordFieldNumber = 2;
  const ::std::string& plaintextpassword() const;
  void set_plaintextpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_plaintextpassword(::std::string&& value);
  #endif
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  ::std::string* mutable_plaintextpassword();
  ::std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(::std::string* plaintextpassword);

  // @@protoc_insertion_point(class_scope:AuthenticateWeb)
 private:
  void set_has_email();
  void clear_has_email();
  void set_has_plaintextpassword();
  void clear_has_plaintextpassword();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plaintextpassword_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateAccountWebSuccess) */ {
 public:
  CreateAccountWebSuccess();
  virtual ~CreateAccountWebSuccess();

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateAccountWebSuccess* other);
  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebSuccess* New() const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(NULL);
  }

  CreateAccountWebSuccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAccountWebSuccess& from);
  void MergeFrom(const CreateAccountWebSuccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CreateAccountWebSuccess)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAccountWebFailure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateAccountWebFailure) */ {
 public:
  CreateAccountWebFailure();
  virtual ~CreateAccountWebFailure();

  CreateAccountWebFailure(const CreateAccountWebFailure& from);

  inline CreateAccountWebFailure& operator=(const CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAccountWebFailure(CreateAccountWebFailure&& from) noexcept
    : CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFailure& operator=(CreateAccountWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFailure*>(
               &_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateAccountWebFailure* other);
  friend void swap(CreateAccountWebFailure& a, CreateAccountWebFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebFailure* New() const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(NULL);
  }

  CreateAccountWebFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAccountWebFailure& from);
  void MergeFrom(const CreateAccountWebFailure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::google::protobuf::int64 reason() const;
  void set_reason(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CreateAccountWebFailure)
 private:
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 reason_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AuthenticateWebSuccess) */ {
 public:
  AuthenticateWebSuccess();
  virtual ~AuthenticateWebSuccess();

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AuthenticateWebSuccess* other);
  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebSuccess* New() const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(NULL);
  }

  AuthenticateWebSuccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateWebSuccess& from);
  void MergeFrom(const AuthenticateWebSuccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string creationDate = 2;
  bool has_creationdate() const;
  void clear_creationdate();
  static const int kCreationDateFieldNumber = 2;
  const ::std::string& creationdate() const;
  void set_creationdate(const ::std::string& value);
  #if LANG_CXX11
  void set_creationdate(::std::string&& value);
  #endif
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  ::std::string* mutable_creationdate();
  ::std::string* release_creationdate();
  void set_allocated_creationdate(::std::string* creationdate);

  // required int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AuthenticateWebSuccess)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_creationdate();
  void clear_has_creationdate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr creationdate_;
  ::google::protobuf::int64 userid_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AuthenticateWebFailure) */ {
 public:
  AuthenticateWebFailure();
  virtual ~AuthenticateWebFailure();

  AuthenticateWebFailure(const AuthenticateWebFailure& from);

  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
    : AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
               &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AuthenticateWebFailure* other);
  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebFailure* New() const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(NULL);
  }

  AuthenticateWebFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateWebFailure& from);
  void MergeFrom(const AuthenticateWebFailure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::google::protobuf::int64 reason() const;
  void set_reason(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AuthenticateWebFailure)
 private:
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 reason_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerMessageWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessageWrapper) */ {
 public:
  ServerMessageWrapper();
  virtual ~ServerMessageWrapper();

  ServerMessageWrapper(const ServerMessageWrapper& from);

  inline ServerMessageWrapper& operator=(const ServerMessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessageWrapper(ServerMessageWrapper&& from) noexcept
    : ServerMessageWrapper() {
    *this = ::std::move(from);
  }

  inline ServerMessageWrapper& operator=(ServerMessageWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessageWrapper& default_instance();

  enum MsgCase {
    kM1 = 2,
    kM2 = 3,
    kM3 = 4,
    kM4 = 5,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessageWrapper* internal_default_instance() {
    return reinterpret_cast<const ServerMessageWrapper*>(
               &_ServerMessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServerMessageWrapper* other);
  friend void swap(ServerMessageWrapper& a, ServerMessageWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessageWrapper* New() const final {
    return CreateMaybeMessage<ServerMessageWrapper>(NULL);
  }

  ServerMessageWrapper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessageWrapper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerMessageWrapper& from);
  void MergeFrom(const ServerMessageWrapper& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessageWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messageID = 1;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 1;
  ::google::protobuf::int64 messageid() const;
  void set_messageid(::google::protobuf::int64 value);

  // required int64 clientIndex = 6;
  bool has_clientindex() const;
  void clear_clientindex();
  static const int kClientIndexFieldNumber = 6;
  ::google::protobuf::int64 clientindex() const;
  void set_clientindex(::google::protobuf::int64 value);

  // optional .CreateAccountWebSuccess m1 = 2;
  bool has_m1() const;
  void clear_m1();
  static const int kM1FieldNumber = 2;
  private:
  const ::CreateAccountWebSuccess& _internal_m1() const;
  public:
  const ::CreateAccountWebSuccess& m1() const;
  ::CreateAccountWebSuccess* release_m1();
  ::CreateAccountWebSuccess* mutable_m1();
  void set_allocated_m1(::CreateAccountWebSuccess* m1);

  // optional .CreateAccountWebFailure m2 = 3;
  bool has_m2() const;
  void clear_m2();
  static const int kM2FieldNumber = 3;
  private:
  const ::CreateAccountWebFailure& _internal_m2() const;
  public:
  const ::CreateAccountWebFailure& m2() const;
  ::CreateAccountWebFailure* release_m2();
  ::CreateAccountWebFailure* mutable_m2();
  void set_allocated_m2(::CreateAccountWebFailure* m2);

  // optional .AuthenticateWebSuccess m3 = 4;
  bool has_m3() const;
  void clear_m3();
  static const int kM3FieldNumber = 4;
  private:
  const ::AuthenticateWebSuccess& _internal_m3() const;
  public:
  const ::AuthenticateWebSuccess& m3() const;
  ::AuthenticateWebSuccess* release_m3();
  ::AuthenticateWebSuccess* mutable_m3();
  void set_allocated_m3(::AuthenticateWebSuccess* m3);

  // optional .AuthenticateWebFailure m4 = 5;
  bool has_m4() const;
  void clear_m4();
  static const int kM4FieldNumber = 5;
  private:
  const ::AuthenticateWebFailure& _internal_m4() const;
  public:
  const ::AuthenticateWebFailure& m4() const;
  ::AuthenticateWebFailure* release_m4();
  ::AuthenticateWebFailure* mutable_m4();
  void set_allocated_m4(::AuthenticateWebFailure* m4);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ServerMessageWrapper)
 private:
  void set_has_messageid();
  void clear_has_messageid();
  void set_has_m1();
  void set_has_m2();
  void set_has_m3();
  void set_has_m4();
  void set_has_clientindex();
  void clear_has_clientindex();

  inline bool has_msg() const;
  inline void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 messageid_;
  ::google::protobuf::int64 clientindex_;
  union MsgUnion {
    MsgUnion() {}
    ::CreateAccountWebSuccess* m1_;
    ::CreateAccountWebFailure* m2_;
    ::AuthenticateWebSuccess* m3_;
    ::AuthenticateWebFailure* m4_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientMessageWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientMessageWrapper) */ {
 public:
  ClientMessageWrapper();
  virtual ~ClientMessageWrapper();

  ClientMessageWrapper(const ClientMessageWrapper& from);

  inline ClientMessageWrapper& operator=(const ClientMessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMessageWrapper(ClientMessageWrapper&& from) noexcept
    : ClientMessageWrapper() {
    *this = ::std::move(from);
  }

  inline ClientMessageWrapper& operator=(ClientMessageWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessageWrapper& default_instance();

  enum MsgCase {
    kM1 = 2,
    kM2 = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessageWrapper* internal_default_instance() {
    return reinterpret_cast<const ClientMessageWrapper*>(
               &_ClientMessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ClientMessageWrapper* other);
  friend void swap(ClientMessageWrapper& a, ClientMessageWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMessageWrapper* New() const final {
    return CreateMaybeMessage<ClientMessageWrapper>(NULL);
  }

  ClientMessageWrapper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessageWrapper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientMessageWrapper& from);
  void MergeFrom(const ClientMessageWrapper& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessageWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messageID = 1;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 1;
  ::google::protobuf::int64 messageid() const;
  void set_messageid(::google::protobuf::int64 value);

  // required int64 clientIndex = 6;
  bool has_clientindex() const;
  void clear_clientindex();
  static const int kClientIndexFieldNumber = 6;
  ::google::protobuf::int64 clientindex() const;
  void set_clientindex(::google::protobuf::int64 value);

  // optional .CreateAccountWeb m1 = 2;
  bool has_m1() const;
  void clear_m1();
  static const int kM1FieldNumber = 2;
  private:
  const ::CreateAccountWeb& _internal_m1() const;
  public:
  const ::CreateAccountWeb& m1() const;
  ::CreateAccountWeb* release_m1();
  ::CreateAccountWeb* mutable_m1();
  void set_allocated_m1(::CreateAccountWeb* m1);

  // optional .AuthenticateWeb m2 = 3;
  bool has_m2() const;
  void clear_m2();
  static const int kM2FieldNumber = 3;
  private:
  const ::AuthenticateWeb& _internal_m2() const;
  public:
  const ::AuthenticateWeb& m2() const;
  ::AuthenticateWeb* release_m2();
  ::AuthenticateWeb* mutable_m2();
  void set_allocated_m2(::AuthenticateWeb* m2);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ClientMessageWrapper)
 private:
  void set_has_messageid();
  void clear_has_messageid();
  void set_has_m1();
  void set_has_m2();
  void set_has_clientindex();
  void clear_has_clientindex();

  inline bool has_msg() const;
  inline void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 messageid_;
  ::google::protobuf::int64 clientindex_;
  union MsgUnion {
    MsgUnion() {}
    ::CreateAccountWeb* m1_;
    ::AuthenticateWeb* m2_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// required string email = 1;
inline bool CreateAccountWeb::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateAccountWeb::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateAccountWeb::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:CreateAccountWeb.email)
  return email_.GetNoArena();
}
inline void CreateAccountWeb::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateAccountWeb.email)
}
#if LANG_CXX11
inline void CreateAccountWeb::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateAccountWeb.email)
}
#endif
inline void CreateAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateAccountWeb.email)
}
inline void CreateAccountWeb::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateAccountWeb.email)
}
inline ::std::string* CreateAccountWeb::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:CreateAccountWeb.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:CreateAccountWeb.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountWeb::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:CreateAccountWeb.email)
}

// required string plaintextPassword = 2;
inline bool CreateAccountWeb::has_plaintextpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateAccountWeb::set_has_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateAccountWeb::clear_has_plaintextpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plaintextpassword();
}
inline const ::std::string& CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:CreateAccountWeb.plaintextPassword)
  return plaintextpassword_.GetNoArena();
}
inline void CreateAccountWeb::set_plaintextpassword(const ::std::string& value) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateAccountWeb.plaintextPassword)
}
#if LANG_CXX11
inline void CreateAccountWeb::set_plaintextpassword(::std::string&& value) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateAccountWeb.plaintextPassword)
}
#endif
inline void CreateAccountWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateAccountWeb.plaintextPassword)
}
inline void CreateAccountWeb::set_plaintextpassword(const char* value, size_t size) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateAccountWeb.plaintextPassword)
}
inline ::std::string* CreateAccountWeb::mutable_plaintextpassword() {
  set_has_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:CreateAccountWeb.plaintextPassword)
  return plaintextpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:CreateAccountWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return NULL;
  }
  clear_has_plaintextpassword();
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(::std::string* plaintextpassword) {
  if (plaintextpassword != NULL) {
    set_has_plaintextpassword();
  } else {
    clear_has_plaintextpassword();
  }
  plaintextpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// required string email = 1;
inline bool AuthenticateWeb::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateWeb::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateWeb::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:AuthenticateWeb.email)
  return email_.GetNoArena();
}
inline void AuthenticateWeb::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateWeb.email)
}
#if LANG_CXX11
inline void AuthenticateWeb::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateWeb.email)
}
#endif
inline void AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateWeb.email)
}
inline ::std::string* AuthenticateWeb::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:AuthenticateWeb.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:AuthenticateWeb.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWeb.email)
}

// required string plaintextPassword = 2;
inline bool AuthenticateWeb::has_plaintextpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticateWeb::set_has_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthenticateWeb::clear_has_plaintextpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plaintextpassword();
}
inline const ::std::string& AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:AuthenticateWeb.plaintextPassword)
  return plaintextpassword_.GetNoArena();
}
inline void AuthenticateWeb::set_plaintextpassword(const ::std::string& value) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateWeb.plaintextPassword)
}
#if LANG_CXX11
inline void AuthenticateWeb::set_plaintextpassword(::std::string&& value) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateWeb.plaintextPassword)
}
#endif
inline void AuthenticateWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateWeb.plaintextPassword)
}
inline void AuthenticateWeb::set_plaintextpassword(const char* value, size_t size) {
  set_has_plaintextpassword();
  plaintextpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateWeb.plaintextPassword)
}
inline ::std::string* AuthenticateWeb::mutable_plaintextpassword() {
  set_has_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:AuthenticateWeb.plaintextPassword)
  return plaintextpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:AuthenticateWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return NULL;
  }
  clear_has_plaintextpassword();
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(::std::string* plaintextpassword) {
  if (plaintextpassword != NULL) {
    set_has_plaintextpassword();
  } else {
    clear_has_plaintextpassword();
  }
  plaintextpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// required int64 userId = 1;
inline bool CreateAccountWebSuccess::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateAccountWebSuccess::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateAccountWebSuccess::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateAccountWebSuccess::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebSuccess.userId)
  return userid_;
}
inline void CreateAccountWebSuccess::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// CreateAccountWebFailure

// required int64 reason = 1;
inline bool CreateAccountWebFailure::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateAccountWebFailure::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateAccountWebFailure::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateAccountWebFailure::clear_reason() {
  reason_ = GOOGLE_LONGLONG(0);
  clear_has_reason();
}
inline ::google::protobuf::int64 CreateAccountWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebFailure.reason)
  return reason_;
}
inline void CreateAccountWebFailure::set_reason(::google::protobuf::int64 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:CreateAccountWebFailure.reason)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// required int64 userId = 1;
inline bool AuthenticateWebSuccess::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticateWebSuccess::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthenticateWebSuccess::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthenticateWebSuccess::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebSuccess.userId)
  return userid_;
}
inline void AuthenticateWebSuccess::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:AuthenticateWebSuccess.userId)
}

// required string creationDate = 2;
inline bool AuthenticateWebSuccess::has_creationdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateWebSuccess::set_has_creationdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateWebSuccess::clear_has_creationdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creationdate();
}
inline const ::std::string& AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebSuccess.creationDate)
  return creationdate_.GetNoArena();
}
inline void AuthenticateWebSuccess::set_creationdate(const ::std::string& value) {
  set_has_creationdate();
  creationdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthenticateWebSuccess.creationDate)
}
#if LANG_CXX11
inline void AuthenticateWebSuccess::set_creationdate(::std::string&& value) {
  set_has_creationdate();
  creationdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthenticateWebSuccess.creationDate)
}
#endif
inline void AuthenticateWebSuccess::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_creationdate();
  creationdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthenticateWebSuccess.creationDate)
}
inline void AuthenticateWebSuccess::set_creationdate(const char* value, size_t size) {
  set_has_creationdate();
  creationdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthenticateWebSuccess.creationDate)
}
inline ::std::string* AuthenticateWebSuccess::mutable_creationdate() {
  set_has_creationdate();
  // @@protoc_insertion_point(field_mutable:AuthenticateWebSuccess.creationDate)
  return creationdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:AuthenticateWebSuccess.creationDate)
  if (!has_creationdate()) {
    return NULL;
  }
  clear_has_creationdate();
  return creationdate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(::std::string* creationdate) {
  if (creationdate != NULL) {
    set_has_creationdate();
  } else {
    clear_has_creationdate();
  }
  creationdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creationdate);
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// required int64 reason = 1;
inline bool AuthenticateWebFailure::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateWebFailure::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateWebFailure::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateWebFailure::clear_reason() {
  reason_ = GOOGLE_LONGLONG(0);
  clear_has_reason();
}
inline ::google::protobuf::int64 AuthenticateWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebFailure.reason)
  return reason_;
}
inline void AuthenticateWebFailure::set_reason(::google::protobuf::int64 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:AuthenticateWebFailure.reason)
}

// -------------------------------------------------------------------

// ServerMessageWrapper

// required int64 messageID = 1;
inline bool ServerMessageWrapper::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessageWrapper::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessageWrapper::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessageWrapper::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 ServerMessageWrapper::messageid() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.messageID)
  return messageid_;
}
inline void ServerMessageWrapper::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:ServerMessageWrapper.messageID)
}

// optional .CreateAccountWebSuccess m1 = 2;
inline bool ServerMessageWrapper::has_m1() const {
  return msg_case() == kM1;
}
inline void ServerMessageWrapper::set_has_m1() {
  _oneof_case_[0] = kM1;
}
inline void ServerMessageWrapper::clear_m1() {
  if (has_m1()) {
    delete msg_.m1_;
    clear_has_msg();
  }
}
inline const ::CreateAccountWebSuccess& ServerMessageWrapper::_internal_m1() const {
  return *msg_.m1_;
}
inline ::CreateAccountWebSuccess* ServerMessageWrapper::release_m1() {
  // @@protoc_insertion_point(field_release:ServerMessageWrapper.m1)
  if (has_m1()) {
    clear_has_msg();
      ::CreateAccountWebSuccess* temp = msg_.m1_;
    msg_.m1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CreateAccountWebSuccess& ServerMessageWrapper::m1() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.m1)
  return has_m1()
      ? *msg_.m1_
      : *reinterpret_cast< ::CreateAccountWebSuccess*>(&::_CreateAccountWebSuccess_default_instance_);
}
inline ::CreateAccountWebSuccess* ServerMessageWrapper::mutable_m1() {
  if (!has_m1()) {
    clear_msg();
    set_has_m1();
    msg_.m1_ = CreateMaybeMessage< ::CreateAccountWebSuccess >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessageWrapper.m1)
  return msg_.m1_;
}

// optional .CreateAccountWebFailure m2 = 3;
inline bool ServerMessageWrapper::has_m2() const {
  return msg_case() == kM2;
}
inline void ServerMessageWrapper::set_has_m2() {
  _oneof_case_[0] = kM2;
}
inline void ServerMessageWrapper::clear_m2() {
  if (has_m2()) {
    delete msg_.m2_;
    clear_has_msg();
  }
}
inline const ::CreateAccountWebFailure& ServerMessageWrapper::_internal_m2() const {
  return *msg_.m2_;
}
inline ::CreateAccountWebFailure* ServerMessageWrapper::release_m2() {
  // @@protoc_insertion_point(field_release:ServerMessageWrapper.m2)
  if (has_m2()) {
    clear_has_msg();
      ::CreateAccountWebFailure* temp = msg_.m2_;
    msg_.m2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CreateAccountWebFailure& ServerMessageWrapper::m2() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.m2)
  return has_m2()
      ? *msg_.m2_
      : *reinterpret_cast< ::CreateAccountWebFailure*>(&::_CreateAccountWebFailure_default_instance_);
}
inline ::CreateAccountWebFailure* ServerMessageWrapper::mutable_m2() {
  if (!has_m2()) {
    clear_msg();
    set_has_m2();
    msg_.m2_ = CreateMaybeMessage< ::CreateAccountWebFailure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessageWrapper.m2)
  return msg_.m2_;
}

// optional .AuthenticateWebSuccess m3 = 4;
inline bool ServerMessageWrapper::has_m3() const {
  return msg_case() == kM3;
}
inline void ServerMessageWrapper::set_has_m3() {
  _oneof_case_[0] = kM3;
}
inline void ServerMessageWrapper::clear_m3() {
  if (has_m3()) {
    delete msg_.m3_;
    clear_has_msg();
  }
}
inline const ::AuthenticateWebSuccess& ServerMessageWrapper::_internal_m3() const {
  return *msg_.m3_;
}
inline ::AuthenticateWebSuccess* ServerMessageWrapper::release_m3() {
  // @@protoc_insertion_point(field_release:ServerMessageWrapper.m3)
  if (has_m3()) {
    clear_has_msg();
      ::AuthenticateWebSuccess* temp = msg_.m3_;
    msg_.m3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::AuthenticateWebSuccess& ServerMessageWrapper::m3() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.m3)
  return has_m3()
      ? *msg_.m3_
      : *reinterpret_cast< ::AuthenticateWebSuccess*>(&::_AuthenticateWebSuccess_default_instance_);
}
inline ::AuthenticateWebSuccess* ServerMessageWrapper::mutable_m3() {
  if (!has_m3()) {
    clear_msg();
    set_has_m3();
    msg_.m3_ = CreateMaybeMessage< ::AuthenticateWebSuccess >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessageWrapper.m3)
  return msg_.m3_;
}

// optional .AuthenticateWebFailure m4 = 5;
inline bool ServerMessageWrapper::has_m4() const {
  return msg_case() == kM4;
}
inline void ServerMessageWrapper::set_has_m4() {
  _oneof_case_[0] = kM4;
}
inline void ServerMessageWrapper::clear_m4() {
  if (has_m4()) {
    delete msg_.m4_;
    clear_has_msg();
  }
}
inline const ::AuthenticateWebFailure& ServerMessageWrapper::_internal_m4() const {
  return *msg_.m4_;
}
inline ::AuthenticateWebFailure* ServerMessageWrapper::release_m4() {
  // @@protoc_insertion_point(field_release:ServerMessageWrapper.m4)
  if (has_m4()) {
    clear_has_msg();
      ::AuthenticateWebFailure* temp = msg_.m4_;
    msg_.m4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::AuthenticateWebFailure& ServerMessageWrapper::m4() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.m4)
  return has_m4()
      ? *msg_.m4_
      : *reinterpret_cast< ::AuthenticateWebFailure*>(&::_AuthenticateWebFailure_default_instance_);
}
inline ::AuthenticateWebFailure* ServerMessageWrapper::mutable_m4() {
  if (!has_m4()) {
    clear_msg();
    set_has_m4();
    msg_.m4_ = CreateMaybeMessage< ::AuthenticateWebFailure >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessageWrapper.m4)
  return msg_.m4_;
}

// required int64 clientIndex = 6;
inline bool ServerMessageWrapper::has_clientindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMessageWrapper::set_has_clientindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMessageWrapper::clear_has_clientindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMessageWrapper::clear_clientindex() {
  clientindex_ = GOOGLE_LONGLONG(0);
  clear_has_clientindex();
}
inline ::google::protobuf::int64 ServerMessageWrapper::clientindex() const {
  // @@protoc_insertion_point(field_get:ServerMessageWrapper.clientIndex)
  return clientindex_;
}
inline void ServerMessageWrapper::set_clientindex(::google::protobuf::int64 value) {
  set_has_clientindex();
  clientindex_ = value;
  // @@protoc_insertion_point(field_set:ServerMessageWrapper.clientIndex)
}

inline bool ServerMessageWrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ServerMessageWrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ServerMessageWrapper::MsgCase ServerMessageWrapper::msg_case() const {
  return ServerMessageWrapper::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientMessageWrapper

// required int64 messageID = 1;
inline bool ClientMessageWrapper::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessageWrapper::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMessageWrapper::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMessageWrapper::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 ClientMessageWrapper::messageid() const {
  // @@protoc_insertion_point(field_get:ClientMessageWrapper.messageID)
  return messageid_;
}
inline void ClientMessageWrapper::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:ClientMessageWrapper.messageID)
}

// optional .CreateAccountWeb m1 = 2;
inline bool ClientMessageWrapper::has_m1() const {
  return msg_case() == kM1;
}
inline void ClientMessageWrapper::set_has_m1() {
  _oneof_case_[0] = kM1;
}
inline void ClientMessageWrapper::clear_m1() {
  if (has_m1()) {
    delete msg_.m1_;
    clear_has_msg();
  }
}
inline const ::CreateAccountWeb& ClientMessageWrapper::_internal_m1() const {
  return *msg_.m1_;
}
inline ::CreateAccountWeb* ClientMessageWrapper::release_m1() {
  // @@protoc_insertion_point(field_release:ClientMessageWrapper.m1)
  if (has_m1()) {
    clear_has_msg();
      ::CreateAccountWeb* temp = msg_.m1_;
    msg_.m1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CreateAccountWeb& ClientMessageWrapper::m1() const {
  // @@protoc_insertion_point(field_get:ClientMessageWrapper.m1)
  return has_m1()
      ? *msg_.m1_
      : *reinterpret_cast< ::CreateAccountWeb*>(&::_CreateAccountWeb_default_instance_);
}
inline ::CreateAccountWeb* ClientMessageWrapper::mutable_m1() {
  if (!has_m1()) {
    clear_msg();
    set_has_m1();
    msg_.m1_ = CreateMaybeMessage< ::CreateAccountWeb >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ClientMessageWrapper.m1)
  return msg_.m1_;
}

// optional .AuthenticateWeb m2 = 3;
inline bool ClientMessageWrapper::has_m2() const {
  return msg_case() == kM2;
}
inline void ClientMessageWrapper::set_has_m2() {
  _oneof_case_[0] = kM2;
}
inline void ClientMessageWrapper::clear_m2() {
  if (has_m2()) {
    delete msg_.m2_;
    clear_has_msg();
  }
}
inline const ::AuthenticateWeb& ClientMessageWrapper::_internal_m2() const {
  return *msg_.m2_;
}
inline ::AuthenticateWeb* ClientMessageWrapper::release_m2() {
  // @@protoc_insertion_point(field_release:ClientMessageWrapper.m2)
  if (has_m2()) {
    clear_has_msg();
      ::AuthenticateWeb* temp = msg_.m2_;
    msg_.m2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::AuthenticateWeb& ClientMessageWrapper::m2() const {
  // @@protoc_insertion_point(field_get:ClientMessageWrapper.m2)
  return has_m2()
      ? *msg_.m2_
      : *reinterpret_cast< ::AuthenticateWeb*>(&::_AuthenticateWeb_default_instance_);
}
inline ::AuthenticateWeb* ClientMessageWrapper::mutable_m2() {
  if (!has_m2()) {
    clear_msg();
    set_has_m2();
    msg_.m2_ = CreateMaybeMessage< ::AuthenticateWeb >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ClientMessageWrapper.m2)
  return msg_.m2_;
}

// required int64 clientIndex = 6;
inline bool ClientMessageWrapper::has_clientindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMessageWrapper::set_has_clientindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMessageWrapper::clear_has_clientindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMessageWrapper::clear_clientindex() {
  clientindex_ = GOOGLE_LONGLONG(0);
  clear_has_clientindex();
}
inline ::google::protobuf::int64 ClientMessageWrapper::clientindex() const {
  // @@protoc_insertion_point(field_get:ClientMessageWrapper.clientIndex)
  return clientindex_;
}
inline void ClientMessageWrapper::set_clientindex(::google::protobuf::int64 value) {
  set_has_clientindex();
  clientindex_ = value;
  // @@protoc_insertion_point(field_set:ClientMessageWrapper.clientIndex)
}

inline bool ClientMessageWrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ClientMessageWrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ClientMessageWrapper::MsgCase ClientMessageWrapper::msg_case() const {
  return ClientMessageWrapper::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2eproto
